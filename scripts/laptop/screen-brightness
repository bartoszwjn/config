#!/bin/bash



get_brightness() {
    cat "$brightness_path"
}

increase_brightness() {
    local original_brightness=$(get_brightness)
    local increase=$(("$1" * $max_brightness / 100))
    local new_brightness=$(($original_brightness + $increase))
    new_brightness=$(($new_brightness > $max_brightness ? $max_brightness : $new_brightness))

    echo "$new_brightness" > "$brightness_path"
}

decrease_brightness() {
    local original_brightness=$(get_brightness)
    local decrease=$((("$1" * $max_brightness) / 100))
    local new_brightness=$(($original_brightness - $decrease))
    new_brightness=$(($new_brightness < 0 ? 0 : $new_brightness))

    echo "$new_brightness" > "$brightness_path"
}

# Display a notification indicating the current brightness.
notify_brightness() {
    local bright=$(($(get_brightness) * 100 / $max_brightness))
    local icon="notification-display-brightness"
    local text="Brightness ${bright}%"

    local progress=$(get_progress_bar "$bright")
    local text="$text $progress"

    if $opt_use_dunstify; then
        dunstify -i "$icon" -t $expires -h int:value:"$bright" -h string:synchronous:brightness "$text" -r 1000
    else
        notify-send -i "$icon" -t $expires -h int:value:"$bright" -h string:synchronous:brightness "$text"
    fi
}

# Generates a progress bar for the provided value.
#
# Arguments:
#   Percentage      (integer) Percentage of progress.
#   Maximum         (integer) Maximum percentage. (default: 100)
#   Divisor         (integer) For calculating the ratio of blocks to progress (default: 5)
#
# Returns:
#   The progress bar.
get_progress_bar() {
    local percent="$1"
    local max_percent=${2:-100}
    local divisor=${3:-5}
    local progress=$((($percent > $max_percent ? $max_percent : $percent) / $divisor))

    if [[ $progress -gt 0 ]] ; then
        printf 'â–ˆ%.0s' $(eval echo "{1..$progress}")
    fi
}

# Display program usage.
usage() {
    echo "Usage: $0 [options]
Control screen backlight.

Options:
  -d <amount>       decrease brightness
  -e <expires>      expiration time of notifications, in milliseconds
  -i <amount>       increase brightness
  -n                show notifications
  -y                use dunstify instead of notify-send
  -h                display this help and exit
" 1>&2
    exit 1
}
###########################################################

backlight="/sys/class/backlight/intel_backlight/"
max_brightness=$(cat "${backlight}max_brightness")
brightness_path="${backlight}brightness"

opt_decrease_brightness=false
opt_increase_brightness=false
opt_notification=false
opt_use_dunstify=false
brightness=10
expires="1500"

while getopts "d:e:hi:ny" o; do
    case "$o" in
        d)
            opt_decrease_brightness=true
            brightness="${OPTARG}"
            ;;
        e)
            expires="${OPTARG}"
            ;;
        i)
            opt_increase_brightness=true
            brightness="${OPTARG}"
            ;;
        n)
            opt_notification=true
            ;;
        y)
            opt_use_dunstify=true
            ;;
        h | *)
            usage
            ;;
    esac
done
shift $((OPTIND-1)) # Shift off options and optional --

if ${opt_increase_brightness}; then
    increase_brightness $brightness
elif ${opt_decrease_brightness}; then
    decrease_brightness $brightness
fi

# The options below this line must be last
if ${opt_notification}; then
    notify_brightness
fi
